name: "Changed Files"
description: "A simple action that retrieves the list of changed files in a pull request using the GitHub CLI and can filter using regex."

outputs:
  all_changed_files:
    description: "A space-separated list of all changed files."
    value: ${{ steps.main.outputs.all_changed_files }}
  new_or_modified_files:
    description: "A space-separated list of all new or modified files."
    value: ${{ steps.main.outputs.new_or_modified_files }}
  removed_files:
    description: "A space-separated list of all removed files."
    value: ${{ steps.main.outputs.removed_files }}

inputs:
  include_regex:
    description: "File inclusion pattern as regex. Setting this will only list files matching this pattern. Leave empty to include all files."
    required: false
    default: ""
  exclude_regex:
    description: "File exclusion pattern as regex. Setting a value here, will exclude files matching this pattern. Leave empty to exclude no files."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - id: main
      run: |
        if [ -z "$GH_TOKEN" ]; then
          export GH_TOKEN=$GITHUB_TOKEN
        fi

        # Remove empty lines and join non-blank lines with a pipe.
        INCLUDE_REGEX=$(echo "${{ inputs.include_regex }}" | sed '/^[[:space:]]*$/d' | tr '\n' '|' | sed 's/|$//')
        EXCLUDE_REGEX=$(echo "${{ inputs.exclude_regex }}" | sed '/^[[:space:]]*$/d' | tr '\n' '|' | sed 's/|$//')

        # Set default values if inputs are empty.
        if [ -z "$INCLUDE_REGEX" ]; then 
          INCLUDE_REGEX=".*"
        fi
        if [ -z "$EXCLUDE_REGEX" ]; then 
          EXCLUDE_REGEX="$^"
        fi

        echo "Using include regex: $INCLUDE_REGEX"
        echo "Using exclude regex: $EXCLUDE_REGEX"

        include_filter="select(test(\$include))"
        exclude_filter="select(test(\$exclude) | not)"
        # Determine whether this is a pull_request event or a push event.
        if [ -n "${{ github.event.pull_request.number }}" ]; then
          echo "Detected pull_request event."
          response="$(gh api --paginate repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files)"
          expr_all_files='.[].filename'
          expr_new_or_modified='.[] | select(.status != "removed") | .filename'
          expr_removed='.[] | select(.status == "removed") | .filename'
        else
          echo "Detected push event. Using compare API."
          response="$(gh api repos/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})"
          expr_all_files='.files[].filename'
          expr_new_or_modified='.files[] | select(.status != "removed") |.filename'
          expr_removed='.files[] | select(.status == "removed") | .filename'
        fi

        mapfile -t all_files < <(
          echo "${response}" | jq -r --arg include "${INCLUDE_REGEX}" --arg exclude "${EXCLUDE_REGEX}" "${expr_all_files} | ${include_filter} | ${exclude_filter}"
        )
        mapfile -t new_or_modified_files < <(
          echo "${response}" | jq -r --arg include "${INCLUDE_REGEX}" --arg exclude "${EXCLUDE_REGEX}" "${expr_new_or_modified} | ${include_filter} | ${exclude_filter}"
        )
        mapfile -t removed_files < <(
          echo "${response}" | jq -r --arg include "${INCLUDE_REGEX}" --arg exclude "${EXCLUDE_REGEX}" "${expr_removed} | ${include_filter} | ${exclude_filter}"
        )

        echo "Got files: [${all_files[*]}]"

        # Write outputs for this step.
        echo "all_changed_files=${all_files[*]}" >> "$GITHUB_OUTPUT"
        echo "new_or_modified_files=${new_or_modified_files[*]}" >> "$GITHUB_OUTPUT"
        echo "removed_files=${removed_files[*]}" >> "$GITHUB_OUTPUT"
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
